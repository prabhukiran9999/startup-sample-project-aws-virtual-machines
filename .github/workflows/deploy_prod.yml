# This workflow will apply the terraform scripts which would deploy the recquied infrastructure and the startup-sample-app

name: Terraform Apply prod

on:
  push:
    branches: [ main ]
    
env:
  TF_VERSION: 1.0.9
  environment: prod
  SHA: ${{ github.sha }}
  GIT_URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY	
  Branch : ${GITHUB_REF##*/}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
  
jobs:
  build:
    environment: prod
    runs-on: ubuntu-latest    
    steps:
      - name: checkout the repo and building the Backend    
        uses: actions/checkout@v3
      
      - name: Extract branch name
        shell: bash
        run: echo ${GITHUB_REF##*/}
        
      - name: setting variables
        run: | 
             cd terraform/
             cat <<EOF > prod.auto.tfvars
             sha = "${{ env.SHA }}"
             git_url= "${{ env.GIT_URL }}"
             branch = "${{ env.Branch }}"
             target_env = "${{ env.environment }}"
             EOF
             
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.TERRAFORM_DEPLOY_ROLE_ARN }}
          aws-region: ca-central-1
            
      - name: Deploying startup-sample-project using terraform
        run: |
            cd terraform/
            cat <<EOF > backend.hcl
            bucket = "${{ vars.S3_BACKEND_NAME }}"
            key = "${{ vars.LICENCEPLATE }}/${{ env.environment }}/virtual-machine-app.tfstate"
            dynamodb_table = "terraform-remote-state-lock-${{ vars.LICENCEPLATE }}"
            EOF
            
            terraform init -backend-config=backend.hcl -input=false
            terraform apply -auto-approve -input=false
